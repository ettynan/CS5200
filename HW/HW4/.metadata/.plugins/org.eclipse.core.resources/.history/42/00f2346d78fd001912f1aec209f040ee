package blog.dal;

import blog.model.*;

import java.sql.Connection;
import java.math.BigDecimal;
import java.util.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;


public class CreditCardsDao {
    protected ConnectionManager connectionManager;

    private static CreditCardsDao instance = null;

    protected CreditCardsDao() {
        connectionManager = new ConnectionManager();
    }

    public static CreditCardsDao getInstance() {
        if (instance == null) {
            instance = new CreditCardsDao();
        }
        return instance;
    }

    public CreditCards create(CreditCards creditCards) throws SQLException {
        String insertCreditCard =
                "INSERT INTO CreditCards(CardNumner,Expiration,UserName) " +
                        "VALUES(?,?,?);";
        Connection connection = null;
        PreparedStatement insertStmt = null;
        try {
            connection = connectionManager.getConnection();
            insertStmt = connection.prepareStatement(insertCreditCard);
            insertStmt.setLong(1, (creditCards.getCardNumber()));
            insertStmt.setTimestamp(2, new Timestamp(creditCards.getExpiration().getTime()));
            insertStmt.setString(3, creditCards.getUser().getUserName());
            insertStmt.executeUpdate();
            return creditCards;
        } catch (SQLException e) {
            e.printStackTrace();
            throw e;
        } finally {
            if(connection != null) {
                connection.close();
            }
            if(insertStmt != null) {
                insertStmt.close();
            }
        }
    }
    
    /**
	 * Get the CreditCards record by fetching it from your MySQL instance.
	 * This runs a SELECT statement and returns a single BlogPosts instance.
	 * Note that we use BlogUsersDao to retrieve the referenced BlogUsers instance.
	 * One alternative (possibly more efficient) is using a single SELECT statement
	 * to join the BlogPosts, BlogUsers tables and then build each object.
	 */
	public CreditCards getCardNumber(long cardNumber) throws SQLException {
		String selectCreditCard =
			"SELECT CardNumber,Expiration,UserName " +
			"FROM CreditCards " +
			"WHERE CardNumber=?;";
		Connection connection = null;
		PreparedStatement selectStmt = null;
		ResultSet results = null;
		try {
			connection = connectionManager.getConnection();
			selectStmt = connection.prepareStatement(selectBlogPost);
			selectStmt.setInt(1, postId);
			results = selectStmt.executeQuery();
			BlogUsersDao blogUsersDao = BlogUsersDao.getInstance();
			if(results.next()) {
				int resultPostId = results.getInt("PostId");
				String title = results.getString("Title");
				String picture = results.getString("Picture");
				String content = results.getString("Content");
				boolean published = results.getBoolean("Published");
				Date created =  new Date(results.getTimestamp("Created").getTime());
				String userName = results.getString("UserName");
				
				BlogUsers blogUser = blogUsersDao.getBlogUserFromUserName(userName);
				BlogPosts blogPost = new BlogPosts(resultPostId, title, picture, content,
					published, created, blogUser);
				return blogPost;
			}
		} catch (SQLException e) {
			e.printStackTrace();
			throw e;
		} finally {
			if(connection != null) {
				connection.close();
			}
			if(selectStmt != null) {
				selectStmt.close();
			}
			if(results != null) {
				results.close();
			}
		}
		return null;
	}

}